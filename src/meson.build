global_conf = configuration_data()
global_conf.set_quoted('APP_ID', application_id)
global_conf.set_quoted('PKGDATADIR', pkgdatadir)
global_conf.set_quoted('PROFILE', profile)
global_conf.set_quoted('VERSION', version + version_suffix)
global_conf.set_quoted('GETTEXT_PACKAGE', gettext_package)
global_conf.set_quoted('LOCALEDIR', localedir)
config = configure_file(
  input: 'config.rs.in',
  output: 'config.rs',
  configuration: global_conf
)
# Copy the config.rs output to the source directory.
run_command(
  'cp',
  meson.build_root() / 'src' / 'config.rs',
  meson.source_root() / 'src' / 'config.rs',
  check: true
)

sources = files(
  'backend/mod.rs',
  'backend/pipeline_builder.rs',
  'backend/recorder.rs',
  'backend/recorder_controller.rs',
  'backend/screencast_portal.rs',
  'backend/settings.rs',
  'backend/timer.rs',
  'widgets/area_selector.rs',
  'widgets/mod.rs',
  'widgets/window.rs',
  'application.rs',
  'config.rs',
  'data_types.rs',
  'i18n.rs',
  'main.rs',
  'utils.rs',
)

custom_target(
  'cargo-build',
  build_by_default: true,
  input: sources,
  output: meson.project_name(),
  console: true,
  install: true,
  install_dir: bindir,
  depends: resources,
  command: [
    cargo_script,
    meson.build_root(),
    meson.source_root(),
    '@OUTPUT@',
    profile,
    meson.project_name(),
  ]
)

test(
    'run-cargo-test',
    cargo_test_script,
    args: [
       meson.source_root(),
    ]
)
